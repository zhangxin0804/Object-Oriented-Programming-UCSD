1. GUIs in Java. Java的图形化用户接口/界面的library库有很多选择。比如，Swing, AWT, JavaFX, Processing.在这门课中
我们选择Processing library, 因为Unfolding Map也是基于Java和Processing来实现的。
也即 Java + Processing + Unfolding Map

2. https://processing.org/reference/

3. http://processing.github.io/processing-javadocs/core/

4. 这门课选择Processing这个库作为实现GUIs in Java的基础。其中PApplet这个class是一个base class基类它是开发者提供给我们
的GUI,当用户需要开发自己的图形用户application时，需要extends PApplet也就是继承这个基类，然后再根据Javadoc重新customize
自己的application.



5. setup()方法是用来configure canvas, draw()方法是用来display content. 比如在setup()中，我们load了一个server端的jpg文件
作为Background image这里其实只是将jpg数据load进了memory, 如果不在draw()中进行绘制即调用image()方法，仍然不会显示该背景。
注意：这两个方法，在开发新的application时是相当于override了基类PApplet类中的方法。

https://processing.org/reference/setup_.html
https://processing.org/reference/draw_.html
https://processing.org/reference/loadImage_.html
https://processing.org/reference/image_.html

6. https://processing.org/tutorials/eclipse/, 如何在其他project中使用Processing library.

7. 注意：如果background image本身的resolution长宽都很大，远大于Canvas中的width和height,我们可以调用PImage类产生的对象
中的resize()方法，进行图片size的压缩。比如一张图片为 1280*720, 当前canvas大小为 200*200. 如果我们调用下面语句，img.resize(200, 200);
实现的就是在200*200的大小范围的canvas上将原先1280*720的图片内容显示出来，会有失真但是所有内容部分都保留存在。
	但是这样的一种resize在scale上并不是proportionally的，意思就是说比如长从1280变成200后调整的比例，与宽从720变成200后调整的比例并不一样
因此resize()还可以这么用，to make the image scale proportionally, use 0 as the value for the wide or high parameter.
For instance, to make the width of an image 150 pixels, and change the height using the same proportion, use 
resize(0, 150).也就是说将原先的图片resize后，我的新size的height为150，也就是说这个150的范围内要能够显示所有原先图片纵向的内容。那么相当于
height从720变成了150，这里有一个比例。然后，由于我们width部分指定的是0，也就是说width部分由API去按照之前高度resize的比例去计算，但是假如
根据比例计算出来的width如果要比我当前canvas的width大的话，那就意味着我这个canvas没法显示全横向的内容信息了。

	如上所述有个tricky的地方就是，我可以再width和height中，选择一个参数来specify最终我希望显示的宽或者长，另外一个参数由函数内部自己
计算出来一个scale proportionally的值，也即我们的canvas最好能有这个值的width或者height, 否则就有可能会显示不完整所有信息！！

还有一个tricky的地方就是，考虑到可能会drag canvase使得canvas的长宽发生变化，我们希望此时的background image size也自适应变化dynamically, 因此可以在resize()函数中，参数用width和height表示，另外

		img.resize(0, height);			//resize loaded image to full height of canvas
		image(img, 0, 0);			//display image
这两句话一个resize一个display, 要一起在draw()中调用才能保证自适应动态变化。


https://processing.org/reference/PImage.html
https://processing.org/reference/PImage_resize_.html
https://processing.org/reference/height.html
https://processing.org/reference/width.html



8. 从PApplet这个base class中继承过来的height和width, 默认是200 * 200.

9. 在图形用户应用开发中，我们对坐标位置的概念一定要敏感。无论是浏览器，还是Applet window等，避免不了User会进行拖拽拉大缩小窗口。
因此，应用程序中对象的位置，最好是要弄成会随着canvas size变化而dynamically change !!!!因此，要利用相对坐标位置而非绝对坐标位置。

https://processing.org/reference/ellipse_.html

10. 注意Processing库中，对2D图形的绘制和着色的操作顺序，以及具体的API说明。注意，每一次执行fill()方法，之后的shape的着色都将是这个color
, 如果希望不同的shape有不同的color, 就得每次用fill()重新开始一组操作。
	
	fill() affects all the shapes which are drawn post execution of this method. So if you draw ellipse (or any shape) 
first and then write fill the drawn ellipse (or any shape) will not be filled. But if you fill() first and then 
draw shapes, all subsequent shapes will be filled by that color.

https://processing.org/reference/fill_.html

11. Processing库中也有跟时间time有关的方法，注意查doc.比如second()方法。

12. Unfolding is a library to create interactive maps and geovisualizations in Processing and Java.
就是说Unfolding map这个库他能够提供交互式的map以及实现 地学可视化是基于Java和Processing library的。

13. PApplet这个基类帮助我们bring up了一个window, 它相当于是一个GUI datatype, 我们自己的应用只需要继承PApplet, 然后customize
我们自己的类就好了。

	这里其实可以了解一下Java Applet也即Java小应用程序applet. Applet或Java小应用程序是一种在Web环境下，运行于客户端的Java程序组件。
Applet必须运行于某个特定的“容器”，这个容器可以是浏览器本身，也可以是通过各种插件，或者包括支持Applet的移动设备在内的其他各种程序来运行。与一般的Java应用程序不同，Applet不是通过main方法来运行的, 注意这里！！！

下面这个例子就是类似UCSD-OOP中的例子，这也就是为什么我们看不到main函数在哪儿，但是extends PApplet后实现一些函数后就可以运行Java applet.
https://zh.wikipedia.org/wiki/Java_applet


14. Don't call draw() method on SimplePointMarker object.

15. 字符串类型的浮点数，如果要转换成float类型的，可以利用API, 例如：float f1 = Float.parseFloat("1.234");














