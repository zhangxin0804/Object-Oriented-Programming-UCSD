1. 注意 procedural programming and event-driven programming的区别。

2. 一些典型的交互interactive行为, 比如 keyboard响应，mouse click响应，mouse hover到相应内容上的信息展示等等。这些都属于event-driven
programming. 事件驱动编程模型，in computer programming, event-driven programming is a programming paradigm in which the flow
of the program is determined by events such as user actions (mouse clicks, key presses), sensor outputs, or messages from
other programs/threads. 


3. GUI编程以及基于JS的web开发，多采用event-driven programming paradigm. Event-driven programming is the dominant paradigm used in graphical user interfaces (GUI) and other applications (e.g. JavaScript web applications) that are centered on performing certain actions in response to user input.
具体的实现涉及到比如，event listerner事件监听，event handler, 注册callback函数等等。

4.  一般来说，我们会利用已有的框架或者library来进行event-driven programming, 就是说内部的机制是帮我们实现好了的，我们只是调用一些函数来实现
相应功能。

5. 在我们当前project的组成中，即Processing + Unfolding Map + Java, 我们知道我们的Unfolding Map是基于Processing 
Library的基础上开发的。因此，比如Unfolding Map库中的 MapUtils.createDefaultEventDispatcher(this, map);
它其实底层已经帮助我们，handle一些default的events,比如底层会去帮助我们监听一些default events.

6. PApplet类中本身有一些和event处理相关的函数，比如 keyPressed(KeyEvent event) 等等。我们可以customized这些函数，利用Java的继承和多态的
概念，我们对方法实现overriding,来得到效果。

7. 鼠标在map上的位置, 可以通过mouseX和mouseY来获得坐标，这是从PApplet中继承过来的 public instance variable.

8. PApplet类，实际上implements了2个interface, 一个是MouseListener接口，一个是KeyListener接口。比如MouseListener接口中一些未实现的
方法有，public void mousePressed(){}, public void mouseClicked(){}, public void mouseRealeased(){}等。

9. 