1. 注意 procedural programming and event-driven programming的区别。

2. 一些典型的交互interactive行为, 比如 keyboard响应，mouse click响应，mouse hover到相应内容上的信息展示等等。这些都属于event-driven
programming. 事件驱动编程模型，in computer programming, event-driven programming is a programming paradigm in which the flow
of the program is determined by events such as user actions (mouse clicks, key presses), sensor outputs, or messages from
other programs/threads. 


3. GUI编程以及基于JS的web开发，多采用event-driven programming paradigm. Event-driven programming is the dominant paradigm used in graphical user interfaces (GUI) and other applications (e.g. JavaScript web applications) that are centered on performing certain actions in response to user input.
具体的实现涉及到比如，event listerner事件监听，event handler, 注册callback函数等等。

4.  一般来说，我们会利用已有的框架或者library来进行event-driven programming, 就是说内部的机制是帮我们实现好了的，我们只是调用一些函数来实现
相应功能。

5. 在我们当前project的组成中，即Processing + Unfolding Map + Java, 我们知道我们的Unfolding Map是基于Processing 
Library的基础上开发的。因此，比如Unfolding Map库中的 MapUtils.createDefaultEventDispatcher(this, map);
它其实底层已经帮助我们，handle一些default的events,比如底层会去帮助我们监听一些default events.

6. PApplet类中本身有一些和event处理相关的函数，比如 keyPressed(KeyEvent event) 等等。我们可以customized这些函数，利用Java的继承和多态的
概念，我们对方法实现overriding,来得到效果。

7. 鼠标在map上的位置, 可以通过mouseX和mouseY来获得坐标，这是从PApplet中继承过来的 public instance variable.

8. PApplet类，实际上implements了2个interface, 一个是MouseListener接口，一个是KeyListener接口。比如MouseListener接口中一些未实现的
方法有，public void mousePressed(){}, public void mouseClicked(){}, public void mouseRealeased(){}等。

9. UnfoldingMap这个类 implements 了两个接口：MapEventListener和java.util.EventListener

10. 事实上，在我们这门课中，由于有两个built-in的Library一个是Processing一个是Unfolding Map, 我们也知道Unfolding Map也是基于
Processing的基础上实现开发的。因此，event handling相关的code应该是有两部分，一部分是Processing library底层实现的，另一部分是
Unfolding Map底层实现的。这就是为什么，我们override了PApplet类中的比如keyPressed()方法并且自定义实现后，我们按键后，UnfoldingMap那边
还是会进行zoom in和zoom out, 因为那边Unfolding Map的底层仍然也对键盘有响应。
别忘了，我们设置过 MapUtils.createDefaultEventDispatcher(this, map);

11. 注意，List<Feature> countries = GeoJSONReader.loadData(this, countryFile);
比如这样一句话，虽然countries是Feature类型存储的，但实际上内部输出后他们的class类别是PointFeature, 只不过PointFeature是Feature的子类。
但是我们用父类的类型来存储也是可以的，实际用的时候，可以向下cast成PointFeature再调用相应方法！

12. 不管是对于Processing库还是Unfolding Map库，在event-driven programming的paradigm中，关于event的监听listener是底层built-in代码
已经帮助我们实现好的。我们要做的就是重新customized一些event handler函数，这可以通过子类override一些方法来实现。

13. 注意pg.pushStyle()和pg.popStyle()的搭配使用，比如有些实现方面的效果，需要改变一些参数啥的，但是如果直接改变的话，那整体visual
representation的其他部分也会跟着改变，因此每次再对特定部分的视觉效果调整时，可以把之前的暂存一下相当于入栈，最后再出栈还原。

14. 








